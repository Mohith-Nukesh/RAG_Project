# -*- coding: utf-8 -*-
"""RAG_eval_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lhwfDNSsN8H7uIwSOb1tmyfBfwO70cfE
"""

import json
import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt

# Step 1: Upload JSON files
uploaded = files.upload()

# Step 2: Load JSON data
file_names = list(uploaded.keys())

data_list = []
for file in file_names:
    with open(file, 'r') as f:
        data = json.load(f)
        data_list.append(data)

# Step 3: Convert to DataFrame for analysis
dfs = []
for i, data in enumerate(data_list):
    df = pd.json_normalize(data)
    df['file'] = file_names[i]
    dfs.append(df)

full_df = pd.concat(dfs, ignore_index=True)

# Step 4: Calculate averages
avg_metrics = full_df.groupby('file').agg({
    'num_sub_queries': 'mean',
    'rating': 'mean'
}).reset_index()

print("Average Number of Sub-queries and Ratings for each file:")
print(avg_metrics)

# Step 5: Calculate percentage change between files
if len(avg_metrics) == 2:
    change_num_sub_queries = ((avg_metrics.loc[1, 'num_sub_queries'] - avg_metrics.loc[0, 'num_sub_queries']) / avg_metrics.loc[0, 'num_sub_queries']) * 100
    change_rating = ((avg_metrics.loc[1, 'rating'] - avg_metrics.loc[0, 'rating']) / avg_metrics.loc[0, 'rating']) * 100
    print(f"\nPercentage change in num_sub_queries: {change_num_sub_queries:.2f}%")
    print(f"Percentage change in rating: {change_rating:.2f}%")

# Step 6: Plot histogram comparison
fig, axes = plt.subplots(1, 2, figsize=(12,5))

full_df.boxplot(column='num_sub_queries', by='file', ax=axes[0])
axes[0].set_title('Number of Sub-queries Comparison')
axes[0].set_ylabel('Average Sub-queries')
axes[0].set_xlabel('File')

full_df.boxplot(column='rating', by='file', ax=axes[1])
axes[1].set_title('Rating Comparison')
axes[1].set_ylabel('Average Rating')
axes[1].set_xlabel('File')

plt.suptitle('')
plt.show()

import json
import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt

# Step 1: Upload JSON files
uploaded = files.upload()
file_names = list(uploaded.keys())

# Step 2: Load JSON data
data_list = []
for file in file_names:
    with open(file, 'r') as f:
        data = json.load(f)
        data_list.append(data)

# Step 3: Convert to DataFrame
dfs = []
for i, data in enumerate(data_list):
    df = pd.json_normalize(data)
    df['file'] = file_names[i]
    dfs.append(df)

full_df = pd.concat(dfs, ignore_index=True)

# Step 4: Keep relevant columns
full_df = full_df[['file', 'num_sub_queries', 'rating', 'escalated']]

# Step 5: Count True/False escalations per file
escalation_count = full_df.groupby('file')['escalated'].value_counts().unstack(fill_value=0)
print("Escalation Counts (True/False) per file:")
print(escalation_count)

# Step 6: Calculate averages
avg_metrics = full_df.groupby('file').agg({
    'num_sub_queries': 'mean',
    'rating': 'mean'
}).reset_index()

print("\nAverage Number of Sub-queries and Ratings for each file:")
print(avg_metrics)

# Step 7: Percentage reduction in True escalations
if len(escalation_count) == 2:
    true_first = escalation_count.iloc[0]['True'] if 'True' in escalation_count.columns else 0
    true_second = escalation_count.iloc[1]['True'] if 'True' in escalation_count.columns else 0
    if true_first > 0:
        reduction_percent = ((true_first - true_second)/true_first) * 100
    else:
        reduction_percent = 0
    # print(f"\nPercentage reduction in True escalations: {reduction_percent:.2f}%")

# Step 8: Plot bar chart for escalations
escalation_count.plot(kind='bar', stacked=True, figsize=(8,5), color=['red','green'])
plt.title("Escalation Status Comparison per File")
plt.ylabel("Count")
plt.xlabel("File")
plt.show()

